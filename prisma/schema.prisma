// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// product
model Product {
  id          String   @id @default(cuid())
  title       String
  // prodUrls         String[]
  // previewUrls     String[]
  description String
  price       Int
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    String
  purchases   Purchase[]
   prodUrls    ProdUrl[]   
  previewUrls PreviewUrl[] 
    reviews       Review[]
  questions   Question[]
    favorites   Favorite[]
}

model ProdUrl {
  id          String   @id @default(cuid())
  title       String?
  description String?
  url         String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
}

model PreviewUrl {
  id          String   @id @default(cuid())
  title       String?
  description String?
  url         String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
}

// payment
model Purchase {
  id        String @id @default(cuid())
  buyer     User   @relation(fields: [buyerId], references: [id])
  buyerId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount        Int
  currency      String
  paymentMethod String
  transactionId String?
}


// FAQ
model Question {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  answers     Answer[]
}

model Answer {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
}

// review
model Review {
  id          String   @id @default(cuid())
  title       String?
  content     String?
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}


 
// text chat
model Conversation {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  participants  User[]       
  messages      Message[]
}

model Message {
  id            String        @id @default(cuid())
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  sender        User          @relation(fields: [senderId], references: [id])
  senderId      String
}

//  User Auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  purchases     Purchase[]
  reviews       Review[] 
  messages      Message[]
  conversations Conversation[] 
  questions     Question[]
  answers       Answer[]
 userInfo      UserInfo?
 favoriteLists   Favorite[]
}

model UserInfo {
  id            String   @id @default(cuid())
  nickname      String?
  introduction  String?
  balance       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
}

// favorites
model Favorite {
  id        String   @id @default(cuid())
  name      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  products  Product[] 
}