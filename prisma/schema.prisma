// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum FileType {
  AUDIO
  DOC
  IMAGE 
  VIDEO
  TEXT
}
// Content
model Content {
  id          String   @id @default(cuid())
  title       String
  description String
  free        Boolean
  
  price       Int
  fileType        FileType
  files        String[]
  tags        String[]
  mainCategory String[]
  secondCategory String[]
  freeSample      Boolean
  sample      Sample?
  card        Card?
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  memberships ContentMembership[]
  purchases   PurchaseContent[]
  reviews     Review[]
  questions   Question[]
  favorites   Favorite[]
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id String @id @default(cuid())
  text String
  content Content @relation(fields: [contentId],references: [id])
  contentId String
  creator     User @relation(fields:[creatorId],references: [id])
  creatorId   String 
}

model Membership{
  id String @id @default(cuid())
  name String
  description String
  price Int
  content ContentMembership[]
  purchased PurchaseMembership[]
  creator     User @relation(fields:[creatorId],references: [id])
  creatorId   String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContentMembership {
  contentId    String
  content      Content     @relation(fields: [contentId], references: [id])
  membershipId String
  membership   Membership  @relation(fields: [membershipId], references: [id])
  
  @@id([contentId, membershipId])
}


model Card {
  id          String   @id @default(cuid())
  title       String
  description String
  fileType    FileType
  file         String?
  content     Content  @relation(fields: [contentId], references: [id])
  contentId   String @unique
}

model Sample {
  id          String   @id @default(cuid())
  title       String
  description String
  fileType    FileType
  files         String[]
  content     Content  @relation(fields: [contentId], references: [id])
  contentId   String @unique
}

// payment
model PurchaseContent {
  id        String @id @default(cuid())
  buyer     User   @relation(fields: [buyerId], references: [id])
  buyerId   String
  content   Content @relation(fields: [contentId], references: [id])
  contentId String
  price        Int
  transactionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseMembership{
  id        String @id @default(cuid())
  buyer     User   @relation(fields: [buyerId], references: [id])
  buyerId   String
  membershipId String 
  membership Membership @relation(fields: [membershipId], references: [id])
  price        Int
  transactionId String?
  createdAt DateTime @default(now())
  
}

// FAQ
model Question {
  id          String    @id @default(cuid())
  question     String @default("question placeholder")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     Content   @relation(fields: [contentId], references: [id])
  contentId   String @default("clgegusax018hlqyhold3j59r")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  answers     Answer[]
}

model Answer {
  id          String    @id @default(cuid())
  answer     String @default("answer placeholder")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String  @default("clgegvloq01k5lqyhx4bq69bu")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
}

// review
model Review {
  id          String   @id @default(cuid())
  title       String?
  review     String?
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     Content  @relation(fields: [contentId], references: [id])
  contentId   String  @default("clgegusax018hlqyhold3j59r")
  user      User     @relation(fields: [userId], references: [id])
  userId    String  @default("clgegrocx0000lqyh4g76e3qh")
}


 
// text chat
model Conversation {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  participants  User[]       
  messages      Message[]
}

model Message {
  id            String        @id @default(cuid())
  message       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  sender        User          @relation(fields: [senderId], references: [id])
  senderId      String
}

//  User Auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contents      Content[]
  purchases     PurchaseContent[]
  membershipsPurchased  PurchaseMembership[]
  membershipsCreated Membership[]
  reviews       Review[] 
  messages      Message[]
  conversations Conversation[] 
  questions     Question[]
  answers       Answer[]
 favoriteLists   Favorite[]
 comment      Comment[]
 // additional user info
 userName      String @default("New User")
  userId        String @default(cuid())
  introduction  String?
  pfp           String @default("https://feletzxvqxgytpgcgvkw.supabase.co/storage/v1/object/public/public/Default_pfp.png")
  coverPhoto    String @default("https://feletzxvqxgytpgcgvkw.supabase.co/storage/v1/object/public/public/default-cover.jpeg")
  balance       Int @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



// favorites
model Favorite {
  id        String   @id @default(cuid())
  name      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  contents  Content[] 
}